<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="AboutDemos" xml:space="preserve">
    <value>Work in progress</value>
  </data>
  <data name="AboutNlp" xml:space="preserve">
    <value>Natural Language Processing is a subfield of Artificial Intelligence that is concerned about the interaction between computers and human natural language”. NLP makes it possible for computers to read text, hear speech and interpret it, measure sentiment and even determine which parts are relevant. It has become really helpful resolving ambiguity in language and adds numeric structure to the data for many downstream applications.</value>
  </data>
  <data name="AboutNlu" xml:space="preserve">
    <value>Subtopic of Natural Language Processing that uses AI to comprehend input made in the form of sentences in text or speech format. It enables computers to understand commands without the formalized syntax of computer languages and it also enables computers to communicate back to humans in their own languages.&lt;br/&gt;

</value>
  </data>
  <data name="AboutSpeechRecognition" xml:space="preserve">
    <value>Takes audio content and transcribes it into written words in a word processor or other display destination. Extremely valuable to anyone who needs to generate a lot of written content without a lot of manual typing. It is also useful for people with disabilities that make it difficult for them to use a keyboard.&lt;br&gt;

Speech-to-text may also be known as voice recognition</value>
  </data>
  <data name="AboutSpellChecker" xml:space="preserve">
    <value>Work in progress</value>
  </data>
  <data name="AboutTextToSpeech" xml:space="preserve">
    <value>Form of speech synthesis that converts text into spoken voice output. Text to speech systems were first developed to aid the visually impaired by offering a computer-generated spoken voice that would "read" text to the user.</value>
  </data>
  <data name="Allrightsreserved" xml:space="preserve">
    <value>All rights reserved</value>
  </data>
  <data name="ContactUs" xml:space="preserve">
    <value>Contact us</value>
  </data>
  <data name="Demos" xml:space="preserve">
    <value>Demos</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="HomeText" xml:space="preserve">
    <value>As artificial intelligence progresses and technology becomes more sophisticated, we expect existing concepts to embrace this change — or change themselves. Similarly, in the domain of computer-aided processing of natural languages, shall the concept of natural language processing give way to natural language understanding? Or is the relation between the two concepts subtler and more…    &lt;br/&gt; With that in mind , here we apply those technologies for Tamazight language by producing text files for stop words, stemminng, lemmitization,normalization ... Audio files with different dialects . We also built some demo applications such as chatbots, speech synthetizer, speech to text . furthermore we will publish a trainned algoithms in Tamazight for transfer learning purpose . </value>
  </data>
  <data name="NLP" xml:space="preserve">
    <value>NLP</value>
  </data>
  <data name="NLU" xml:space="preserve">
    <value>NLU</value>
  </data>
  <data name="OnlineServices" xml:space="preserve">
    <value>All Services</value>
  </data>
  <data name="SpeechRecognition" xml:space="preserve">
    <value>SpeechRecognition</value>
  </data>
  <data name="SpellChecker" xml:space="preserve">
    <value>Spell checker</value>
  </data>
  <data name="TermsandConditions" xml:space="preserve">
    <value>Terms and Conditions</value>
  </data>
  <data name="TextToSpeech" xml:space="preserve">
    <value>TextToSpeech</value>
  </data>
  <data name="ViewonGithut" xml:space="preserve">
    <value>View on Githut</value>
  </data>
  <data name="WelcomeHeader" xml:space="preserve">
    <value>Online Documentation</value>
  </data>
</root>